apply plugin: 'com.android.application'

android {
    compileSdkVersion 27

    defaultConfig {
        applicationId "com.mainmodule"
        minSdkVersion 23
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }
    sourceSets {
        main {
            res.srcDirs = ['src/main/res', 'src/main/res-ad', 'src/main/res-im']
        }
    }
    buildTypes {
        release {
            postprocessing {
                removeUnusedCode false
                removeUnusedResources false
                obfuscate false
                optimizeCode false
                proguardFile 'proguard-rules.pro'
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "com.android.support:design:27.1.1"
    implementation project(':supermvp')
    implementation project(':keyboard-detector')
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.1'

    implementation "com.jakewharton:butterknife:8.0.0"
    annotationProcessor "com.jakewharton:butterknife-compiler:8.0.0"


}
//gradle 学习  文件拷贝 在项目中 一般做 Copy Apk的工作
//copy{
//   from file('build/outputs/apk/debug/mainmodule.apk')
//   into getRootProject().getBuildDir().path+"/pluginstudy/src/main/assets/test.apk"
//   //在这个里面 对不想要拷贝的文件进行排除
//   exclude {}
//   //文件重命名
//   rename {}
//}

/*
   对文件树进行遍历
 */
//fileTree('build/generated') { FileTree tree ->
//    tree.visit {
//        FileTreeElement element ->
//            println "the File name is:" +element.file.name
//            copy {
//                from element.file
//                into getRootProject().getBuildDir().path + "/test/"
//            }
//    }
//}

/**
 * task输入输出详解
 */
//ext{
//    versionName="1.1.0"
//    versionCode="110"
//    verisonInfo="这是我们第二个版本, 测试了一下gradle,更新了一些小玩意"
//    destFile=file('releases.xml')
//    if (destFile!=null&& !destFile.exists()){
//        destFile.createNewFile()
//    }
//}
//
//task writeTask{
//    //为task指定输入
//    inputs.property("versionName",this.versionName)
//    inputs.property("versionCode",this.versionCode)
//    inputs.property("verisonInfo",this.verisonInfo)
//    //task指定输出
//    outputs.file destFile
//
//    doLast {
//        def data = inputs.getProperties()
//        File file = outputs.getFiles().getSingleFile()
//        //将map转换为实体对象
//        def verMsg = new VersionMsg(data)
//        def sw = new StringWriter()
//        def xmlBuild = new groovy.xml.MarkupBuilder(sw);
//        if (file != null && file.size() <= 0) {
//            //文件中没有内容 先生成Root节点
//            xmlBuild.releases {
//                xmlBuild.release {
//                    VersionCode(verMsg.versionCode)
//                    VersionName(verMsg.versionName)
//                    VersionInfo(verMsg.verisonInfo)
//                }
//            }
//            file.withWriter { write -> write.append(sw.toString()) }
//        } else {
//            //已经存在内容 首先生成三个节点信息
//            xmlBuild.release {
//                VersionCode(verMsg.versionCode)
//                VersionName(verMsg.versionName)
//                VersionInfo(verMsg.verisonInfo)
//            }
//            //将生成的xml数据插入到根节点之前
//            def lines=file.readLines()
//            //当前内容所有的总行数
//            def lengths=lines.size()-1
//            //读取xml文件内容 并且写入信息
//            file.withWriter { write ->
//                lines.eachWithIndex{String line,int index ->
//                    if (index!=lengths){
//                        write.append(line+'\r\n')
//                    }else if(index==lengths){
//                        println sw.toString()
//                        write.append('\r\n'+sw.toString()+"\r\n")
//                        write.append(lines.get(index))
//                    }
//                }
//            }
//        }
//    }
//}
////将已经定义好的任务 和系统构建的任务连接在一起 这样就不用手动执行了
//this.project.afterEvaluate { project ->
//    def buildtask = project.tasks.getByName("build")
//    if (buildtask == null) throw GradleException('the build task is not found')
//    buildtask.doLast {
//        writeTask.execute()
//    }
//}
//task readTask{
//    inputs.file destFile
//    doLast {
//        def file =inputs.files.singleFile
//        println file.text
//    }
//}
//
//task texttask{
//    dependsOn readTask,writeTask
//    doLast{
//        println '执行完毕了 哈哈'
//    }
//}
//class VersionMsg {
//    String versionName;
//    String versionCode;
//    String verisonInfo;
//}
